from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from sqlalchemy.orm import Session
from datetime import datetime, timedelta
from typing import List

from models import Base, engine
import crud
import schemas
from database import get_db

# Create database tables
Base.metadata.create_all(bind=engine)

app = FastAPI(title="English Learning API")

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

# Auth endpoints
@app.post("/register", response_model=schemas.User)
def register_user(user: schemas.UserCreate, db: Session = Depends(get_db)):
    db_user = crud.get_user_by_email(db, email=user.email)
    if db_user:
        raise HTTPException(
            status_code=400,
            detail="Email already registered"
        )
    return crud.create_user(db=db, user=user)

@app.post("/token")
def login(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):
    user = crud.authenticate_user(db, form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect email or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token = crud.create_access_token(data={"sub": user.email})
    return {"access_token": access_token, "token_type": "bearer"}

# Protected routes
@app.get("/users/me", response_model=schemas.User)
def read_users_me(current_user: schemas.User = Depends(crud.get_current_user)):
    return current_user

# Vocabulary context endpoints
@app.get("/vocabulary/context", response_model=schemas.VocabularyContext)
def get_vocabulary_context(current_user: schemas.User = Depends(crud.get_current_user)):
    # This is a sample context. In reality, this would be generated by AI
    return {
        "context": "The weather is beautiful today. The ___ is shining brightly in the sky.",
        "word": "sun",
        "options": ["moon", "sun", "star", "cloud"],
        "correct_answer": "sun"
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000) 